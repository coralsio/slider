<?php

namespace Tests\Feature;

use Corals\Modules\Slider\Models\Slide;
use Corals\Modules\Slider\Models\Slider;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class SlidesTest extends TestCase
{
    use DatabaseTransactions;

    protected $slider;
    protected $slide;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_sliders_store()
    {
        $type = 'html';
        $key = uniqid('slider-');
        $response = $this->post('slider/sliders', [
                'key' => $key,
                'name' => 'slider',
                'type' => $type,
                'status' => 'active',
                "init_options" => [
                ]
            ]
        );

        $this->slider = Slider::query()->where('type', $type)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('slider/sliders');

        $this->assertDatabaseHas('sliders', [
            'key' => $this->slider->key,
            'type' => $this->slider->type,
        ]);
    }

    public function test_slides_store()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->post('slider/sliders/' . $this->slider->hashed_id . '/slides', [
                    'name' => 'slide',
                    'status' => 'active',
                    'content' => 'html'
                ]
            );

            $this->slide = $this->slider->slides->first();

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('slider/sliders/' . $this->slider->hashed_id . '/slides');

            $this->assertDatabaseHas('slides', [
                'name' => $this->slide->name,
                'slider_id' => $this->slide->slider_id
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_slides_view()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id . '/slides');

            $response->assertStatus(200)->assertViewIs('Slider::slides.index');
        }
        $this->assertTrue(true);
    }

    public function test_slides_create()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id . '/slides/create');

            $response->assertViewIs('Slider::slides.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_slides_show()
    {
        $this->test_slides_store();

        if ($this->slide) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id . '/slides/' . $this->slide->hashed_id);

            $response->assertViewIs('Slider::slides.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_slides_edit()
    {
        $this->test_slides_store();

        if ($this->slide) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id . '/slides/' . $this->slide->hashed_id . '/edit');

            $response->assertValid('Slider::slides.create_edit');
        }
        $this->assertTrue(true);
    }

    public function test_slides_update()
    {
        $this->test_slides_store();

        if ($this->slide) {
            $response = $this->put('slider/sliders/' . $this->slider->hashed_id . '/slides/' . $this->slide->hashed_id, [
                'name' => 'slide',
                'status' => 'active',
                'content' => 'html'
            ]);

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('slider/sliders/' . $this->slider->hashed_id . '/slides');

            $this->assertDatabaseHas('slides', [
                'name' => $this->slide->name,
                'slider_id' => $this->slide->slider_id
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_slides_delete()
    {
        $this->test_slides_store();

        if ($this->slide) {
            $response = $this->delete('slider/sliders/' . $this->slider->hashed_id . '/slides/' . $this->slide->hashed_id);

            $this->isSoftDeletableModel(Slide::class);
            $response->assertStatus(200)->assertSeeText('Slide has been deleted successfully.');

        }
        $this->assertTrue(true);
    }
}
