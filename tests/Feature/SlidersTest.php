<?php

namespace Tests\Feature;

use Corals\Modules\Slider\Models\Slider;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class SlidersTest extends TestCase
{
    use DatabaseTransactions;

    protected $slider;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_sliders_store()
    {
        $types = ['images' => 'Images', 'videos' => 'Videos', 'html' => 'Html'];
        $type = array_rand($types);
        $key = uniqid('slider-');
        $response = $this->post(
            'slider/sliders',
            [
                'key' => $key,
                'name' => 'slider',
                'type' => $type,
                'status' => 'active',
                "init_options" => [
                ],
            ]
        );

        $this->slider = Slider::query()->where('type', $type)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('slider/sliders');

        $this->assertDatabaseHas('sliders', [
            'key' => $this->slider->key,
            'type' => $this->slider->type,
        ]);
    }

    public function test_sliders_show()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id);

            $response->assertViewIs('Slider::sliders.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_sliders_edit()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->get('slider/sliders/' . $this->slider->hashed_id . '/edit');

            $response->assertViewIs('Slider::sliders.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_sliders_update()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->put('slider/sliders/' . $this->slider->hashed_id, [
                'key' => $this->slider->key,
                'name' => $this->slider->name,
                'type' => $this->slider->type,
                'status' => $this->slider->status,
            ]);

            $response->assertRedirect('slider/sliders');
            $this->assertDatabaseHas('sliders', [
                'key' => $this->slider->key,
                'type' => $this->slider->type,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_sliders_delete()
    {
        $this->test_sliders_store();

        if ($this->slider) {
            $response = $this->delete('slider/sliders/' . $this->slider->hashed_id);

            $response->assertStatus(200)->assertSeeText('Slider has been deleted successfully.');

            $this->isSoftDeletableModel(Slider::class);
            $this->assertDatabaseMissing('sliders', [
                'key' => $this->slider->key,
                'type' => $this->slider->type,
            ]);
        }
        $this->assertTrue(true);
    }
}
